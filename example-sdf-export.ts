import { parseSMILES, writeSDF, computeDescriptors } from './index';
import type { SDFRecord } from './src/generators/sdf-writer';

const drugMolecules = [
  { smiles: 'CC(C)CC1=CC=C(C=C1)C(C)C(=O)O', name: 'Ibuprofen', mw: 206.28 },
  { smiles: 'CC(=O)OC1=CC=CC=C1C(=O)O', name: 'Aspirin', mw: 180.16 },
  { smiles: 'CN1C=NC2=C1C(=O)N(C(=O)N2C)C', name: 'Caffeine', mw: 194.19 },
  { smiles: 'CC(C)NCC(COC1=CC=CC=C1)O', name: 'Propranolol', mw: 259.34 },
];

console.log('Parsing SMILES and creating SDF...\n');

const records: SDFRecord[] = [];

for (const drug of drugMolecules) {
  const result = parseSMILES(drug.smiles);

  if (result.errors.length > 0) {
    console.error(`Error parsing ${drug.name}:`, result.errors);
    continue;
  }

  const molecule = result.molecules[0];
  if (!molecule) {
    console.error(`No molecule parsed for ${drug.name}`);
    continue;
  }

  const descriptors = computeDescriptors(molecule);

  records.push({
    molecule,
    properties: {
      NAME: drug.name,
      SMILES: drug.smiles,
      MW: drug.mw.toString(),
      ATOMS: molecule.atoms.length.toString(),
      BONDS: molecule.bonds.length.toString(),
      FORMAL_CHARGE: descriptors.formalCharge.toString(),
      HEAVY_ATOM_FRACTION: descriptors.heavyAtomFraction.toString(),
      ELEMENT_COUNTS: JSON.stringify(descriptors.elementCounts),
    },
  });

  console.log(`✓ Parsed ${drug.name}: ${molecule.atoms.length} atoms, ${molecule.bonds.length} bonds`);
  console.log(`  Heavy atom fraction: ${(descriptors.heavyAtomFraction * 100).toFixed(1)}%`);
  console.log(`  Formal charge: ${descriptors.formalCharge}`);
}

console.log('\nGenerating SDF file...\n');

const sdfResult = writeSDF(records, {
  title: 'Common Drug Molecules',
  programName: 'kimchi',
  comment: 'Generated by kimchi example script',
});

if (sdfResult.errors.length > 0) {
  console.error('Errors during SDF generation:', sdfResult.errors);
} else {
  console.log('✓ Successfully generated SDF file');
  console.log(`  Records: ${records.length}`);
  console.log(`  Size: ${sdfResult.sdf.length} bytes`);
}

console.log('\n--- SDF Output Preview (first 500 chars) ---\n');
console.log(sdfResult.sdf.substring(0, 500) + '...\n');

console.log('--- Full SDF Output ---\n');
console.log(sdfResult.sdf);
